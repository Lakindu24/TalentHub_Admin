import React, { useEffect, useState, useCallback } from "react";
import { api, getAuthHeaders } from "../api/apiConfig";
import { toast, Toaster } from "react-hot-toast";
import Navbar from "../components/Navbar";
import Sidebar from "../components/Sidebar";
import {
  Clock,
  User,
  QrCode,
  AlertCircle,
  Check,
  X,
  Loader,
  Calendar,
  RefreshCw,
  QrCodeIcon,
  Users,
  Timer,
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

const DailyAttendanceQR = () => {
  const [qrCode, setQrCode] = useState("");
  const [qrInfo, setQrInfo] = useState(null);
  const [attendanceLogs, setAttendanceLogs] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [timeLeft, setTimeLeft] = useState(0);
  const [isExpired, setIsExpired] = useState(false);

  // Generate new QR code
  const generateNewQR = useCallback(async () => {
    try {
      setIsLoading(true);
      const response = await api.get("/qrcode/generate-daily-qr", getAuthHeaders());
      
      if (response.data.qrCode && response.data.sessionId) {
        setQrCode(response.data.qrCode);
        setQrInfo({
          sessionId: response.data.sessionId,
          expiresAt: response.data.expiresAt,
          validFor: response.data.validFor
        });
        setIsExpired(false);
        
        toast.success("New daily attendance QR code generated!", {
          duration: 3000,
          icon: <Check size={18} />,
        });
      } else {
        throw new Error(response.data.message || "Failed to generate QR code");
      }
    } catch (error) {
      console.error("QR Code generation error:", error);
      toast.error("Failed to generate QR code", {
        duration: 3000,
        icon: <AlertCircle size={18} />,
      });
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Get current QR info
  const getCurrentQRInfo = useCallback(async () => {
    try {
      const response = await api.get("/qrcode/current-qr-info", getAuthHeaders());
      
      if (response.data.success) {
        setQrInfo(response.data);
        setTimeLeft(response.data.timeLeft);
        setIsExpired(response.data.timeLeft <= 0);
        
        // If backend auto-generated a new QR code, update the display
        if (response.data.autoGenerated && response.data.qrCode) {
          setQrCode(response.data.qrCode);
          toast.success("QR Code auto-refreshed!", {
            duration: 2000,
            icon: <RefreshCw size={18} />,
          });
        }
      } else {
        // No active QR code, generate new one
        await generateNewQR();
      }
    } catch (error) {
      console.error("Get QR info error:", error);
      // If no active QR, generate new one
      await generateNewQR();
    }
  }, [generateNewQR]);

  // Fetch today's attendance logs
  const fetchTodaysAttendance = useCallback(async () => {
    try {
      const response = await api.get("/interns", getAuthHeaders());
      const today = new Date().toDateString();
      
      const logs = response.data
        .filter((intern) => {
          // Only show interns who have daily QR attendance today
          return intern.attendance?.some((att) => {
            const attDate = new Date(att.date).toDateString();
            return attDate === today && att.status === "Present" && att.type === "daily_qr";
          });
        })
        .map((intern) => {
          // Find today's daily QR attendance only
          const todayAttendance = intern.attendance.find((att) => {
            const attDate = new Date(att.date).toDateString();
            return attDate === today && att.status === "Present" && att.type === "daily_qr";
          });
          

          
          return {
            traineeId: intern.Trainee_ID || intern.traineeId || "",
            name: intern.Trainee_Name || intern.traineeName || "",
            timeMarked: todayAttendance?.timeMarked || todayAttendance?.date,
            status: todayAttendance?.status,
            type: 'daily_qr'
          };
        })
        .sort((a, b) => new Date(b.timeMarked) - new Date(a.timeMarked));
      
      setAttendanceLogs(logs);

    } catch (error) {
      console.error("Fetch attendance logs error:", error);
      toast.error("Failed to fetch attendance logs", {
        icon: <AlertCircle size={18} />,
      });
    }
  }, []);

  // Auto-refresh logic
  useEffect(() => {
    // Initial load
    getCurrentQRInfo();
    fetchTodaysAttendance();

    // Set up intervals
    const attendanceRefreshInterval = setInterval(fetchTodaysAttendance, 5000); // Refresh attendance every 5 seconds
    const qrStatusInterval = setInterval(getCurrentQRInfo, 3000); // Check QR status every 3 seconds

    return () => {
      clearInterval(attendanceRefreshInterval);
      clearInterval(qrStatusInterval);
    };
  }, [getCurrentQRInfo, fetchTodaysAttendance]);

  // Separate effect for QR auto-generation when expired
  useEffect(() => {
    if (isExpired && !isLoading) {

      generateNewQR();
    }
  }, [isExpired, isLoading, generateNewQR]);

  // Update countdown timer
  useEffect(() => {
    if (qrInfo && qrInfo.expiresAt) {
      const timer = setInterval(() => {
        const remaining = qrInfo.expiresAt - new Date().getTime();
        setTimeLeft(Math.max(0, remaining));
        
        // Check if just expired
        const wasExpired = isExpired;
        const nowExpired = remaining <= 0;
        setIsExpired(nowExpired);
        
        // If just expired (transition from not expired to expired), generate new QR
        if (!wasExpired && nowExpired && !isLoading) {

          generateNewQR();
        }
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [qrInfo, isExpired, isLoading, generateNewQR]);

  // Format time remaining
  const formatTimeLeft = (milliseconds) => {
    const seconds = Math.floor(milliseconds / 1000);
    return `${seconds}s`;
  };

  // Format attendance time
  const formatAttendanceTime = (timeMarked) => {
    if (!timeMarked) return 'N/A';
    
    try {
      const date = new Date(timeMarked);
      
      // Check if date is valid
      if (isNaN(date.getTime())) {
        console.error('Invalid date:', timeMarked);
        return 'Invalid time';
      }
      
      // Check if this is midnight (00:00:00) which indicates date-only storage
      const hours = date.getUTCHours();
      const minutes = date.getUTCMinutes();
      const seconds = date.getUTCSeconds();
      
      if (hours === 0 && minutes === 0 && seconds === 0) {
        // This is midnight UTC, which means only date was stored, not actual time
        return 'Today';
      }
      
      // Format using Intl.DateTimeFormat for proper timezone handling
      const formatter = new Intl.DateTimeFormat('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: true,
        timeZone: 'Asia/Colombo'
      });
      
      return formatter.format(date);
      
    } catch (error) {
      return 'Time error';
    }
  };

  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <div className="sticky top-0 z-10 bg-white shadow-sm">
          <Navbar />
        </div>
        <Toaster position="top-right" />

        <div className="h-20" />

        <main className="flex-1 p-6 md:p-8 lg:p-10 overflow-y-auto">
          {/* Header */}
          <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-4 mb-8">
            <div className="flex items-center gap-4 mt-5">
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{
                  type: "spring",
                  stiffness: 260,
                  damping: 20,
                  delay: 0.2,
                }}
                className="p-4 rounded-2xl"
              >
                <QrCodeIcon className="h-10 w-auto text-4xl text-blue-600" />
              </motion.div>
              <div>
                <motion.h1
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5, delay: 0.3 }}
                  className="text-3xl font-bold text-[#060B27]"
                >
                  Daily Attendance QR
                </motion.h1>
                <motion.p
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5, delay: 0.4 }}
                  className="text-gray-500"
                >
                  Auto-refreshing QR codes every 30 seconds for daily attendance
                </motion.p>
              </div>
            </div>

            <button
              onClick={generateNewQR}
              disabled={isLoading}
              className={`flex items-center justify-center gap-2 bg-blue-500 px-6 py-2.5 text-white rounded-lg hover:bg-blue-600 transition-colors shadow-sm ${
                isLoading ? "opacity-70 cursor-not-allowed" : ""
              }`}
            >
              {isLoading ? (
                <Loader className="h-5 w-5 animate-spin" />
              ) : (
                <RefreshCw className="h-5 w-5" />
              )}
              Generate New QR
            </button>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* QR Code Display */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              className="bg-white rounded-xl shadow-lg p-8"
            >
              <div className="text-center">
                <div className="flex items-center justify-center gap-2 mb-6">
                  <QrCode className="h-6 w-6 text-blue-600" />
                  <h2 className="text-2xl font-bold text-gray-800">Current QR Code</h2>
                </div>

                {qrCode ? (
                  <div className="space-y-6">
                    <div className="relative inline-block">
                      <img
                        src={qrCode}
                        alt="Daily Attendance QR Code"
                        className={`w-64 h-64 mx-auto border-4 rounded-lg ${
                          isExpired ? "border-red-300 opacity-50" : "border-green-300"
                        }`}
                      />
                      {isExpired && (
                        <div className="absolute inset-0 flex items-center justify-center bg-red-500 bg-opacity-80 text-white font-bold text-lg rounded-lg">
                          EXPIRED
                        </div>
                      )}
                    </div>

                    {/* Timer */}
                    <div className="space-y-3">
                      <div className={`flex items-center justify-center gap-2 text-lg font-semibold ${
                        isExpired ? "text-red-600" : timeLeft < 10000 ? "text-orange-600" : "text-green-600"
                      }`}>
                        <Timer className="h-5 w-5" />
                        <span>
                          {isExpired ? "Expired" : `${formatTimeLeft(timeLeft)} remaining`}
                        </span>
                      </div>

                      {/* Progress bar */}
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div
                          className={`h-2 rounded-full transition-all duration-1000 ${
                            isExpired ? "bg-red-500" : timeLeft < 10000 ? "bg-orange-500" : "bg-green-500"
                          }`}
                          style={{
                            width: `${Math.max(0, (timeLeft / (30 * 1000)) * 100)}%`
                          }}
                        />
                      </div>
                    </div>

                    {/* Status indicator */}
                    {timeLeft < 5000 && !isExpired && (
                      <div className="bg-orange-50 border-l-4 border-orange-400 p-4 rounded">
                        <div className="flex items-center">
                          <AlertCircle className="h-5 w-5 text-orange-400 mr-2" />
                          <p className="text-orange-700 text-sm font-medium">
                            QR code expiring soon! New code will generate automatically.
                          </p>
                        </div>
                      </div>
                    )}

                    {/* Instructions */}
                    <div className="bg-blue-50 rounded-lg p-4 text-left">
                      <h3 className="font-semibold text-blue-800 mb-2">Instructions:</h3>
                      <ul className="text-sm text-blue-700 space-y-1">
                        <li>• Interns can scan this QR code using TalentHub system</li>
                        <li>• Each intern can scan only once per QR code</li>
                        <li>• QR code refreshes automatically every 30 seconds</li>
                        <li>• Attendance is recorded with exact timestamp</li>
                        <li>• New QR codes generate automatically when expired</li>
                      </ul>
                    </div>
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center space-y-4">
                    <Loader className="h-12 w-12 animate-spin text-blue-500" />
                    <p className="text-gray-500">Generating QR code...</p>
                  </div>
                )}
              </div>
            </motion.div>

            {/* Attendance Logs */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              className="bg-white rounded-xl shadow-lg p-6"
            >
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-2">
                  <Users className="h-6 w-6 text-green-600" />
                  <h2 className="text-2xl font-bold text-gray-800">Today's Daily QR Attendance</h2>
                </div>
                <div className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-semibold">
                  {attendanceLogs.length} Scanned
                </div>
              </div>

              <div className="space-y-3 max-h-96 overflow-y-auto">
                <AnimatePresence>
                  {attendanceLogs.length > 0 ? (
                    attendanceLogs.map((log, index) => (
                      <motion.div
                        key={log.traineeId}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: 20 }}
                        transition={{ duration: 0.3, delay: index * 0.1 }}
                        className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                      >
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                            <User className="h-5 w-5 text-green-600" />
                          </div>
                          <div>
                            <p className="font-semibold text-gray-800">{log.name}</p>
                            <p className="text-sm text-gray-500">ID: {log.traineeId}</p>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="flex items-center gap-1 text-green-600">
                            <Check className="h-4 w-4" />
                            <span className="text-sm font-semibold">Present</span>
                            {log.type === 'daily_qr' && (
                              <span className="text-xs bg-blue-100 text-blue-600 px-1 rounded">QR</span>
                            )}
                          </div>
                          <div className="text-xs text-gray-500">
                            <p>{formatAttendanceTime(log.timeMarked)}</p>
                            <p className="text-xs text-gray-400">
                              {formatAttendanceTime(log.timeMarked) === 'Today' ? 
                                'Marked today' : 
                                new Date(log.timeMarked).toLocaleDateString('en-US', {
                                  timeZone: 'Asia/Colombo',
                                  month: 'short',
                                  day: 'numeric'
                                })
                              }
                            </p>
                          </div>
                        </div>
                      </motion.div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <QrCode className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                      <p className="text-gray-500">No daily QR attendance scanned yet today</p>
                      <p className="text-xs text-gray-400 mt-1">Only daily QR code scans are shown here</p>
                    </div>
                  )}
                </AnimatePresence>
              </div>
            </motion.div>
          </div>

          {/* Statistics Cards */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.4 }}
            className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8"
          >
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-500 text-sm">Daily QR Scans Today</p>
                  <p className="text-3xl font-bold text-green-600">{attendanceLogs.length}</p>
                </div>
                <Users className="h-12 w-12 text-green-600 opacity-20" />
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-500 text-sm">QR Code Status</p>
                  <p className={`text-lg font-bold ${isExpired ? "text-red-600" : "text-green-600"}`}>
                    {isExpired ? "Expired" : "Active"}
                  </p>
                </div>
                <QrCode className={`h-12 w-12 opacity-20 ${isExpired ? "text-red-600" : "text-green-600"}`} />
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-500 text-sm">Time Remaining</p>
                  <p className={`text-lg font-bold ${
                    isExpired ? "text-red-600" : timeLeft < 10000 ? "text-orange-600" : "text-blue-600"
                  }`}>
                    {isExpired ? "0s" : formatTimeLeft(timeLeft)}
                  </p>
                  <p className="text-xs text-gray-400 mt-1">
                    Current: {new Date().toLocaleTimeString('en-US', {
                      hour: '2-digit',
                      minute: '2-digit',
                      hour12: true,
                      timeZone: 'Asia/Colombo'
                    })}
                  </p>
                </div>
                <Timer className={`h-12 w-12 opacity-20 ${
                  isExpired ? "text-red-600" : timeLeft < 10000 ? "text-orange-600" : "text-blue-600"
                }`} />
              </div>
            </div>
          </motion.div>
        </main>
      </div>
    </div>
  );
};

export default DailyAttendanceQR;