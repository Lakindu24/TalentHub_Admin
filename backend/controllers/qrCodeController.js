const qrCodeService = require("../services/qrCodeService");
const InternService = require("../services/internService"); 
const attendanceService = require("../services/attendanceService");
const InternRepository = require("../repositories/internRepository");  
const sendEmail = require("../utils/emailSender");  

const moment = require("moment");

const QRCode = require("qrcode");



const generateQRCode = async (req, res) => {
  try {
    const sessionId = `attendance_session_${new Date().getTime()}`; 
    const qrCode = await QRCode.toDataURL(sessionId); 

    res.status(200).json({ qrCode });  
  } catch (error) {
    res.status(500).json({ message: "Error generating QR Code", error: error.message });
  }
};

// Generate Daily Attendance QR Code
const generateDailyAttendanceQR = async (req, res) => {
  try {
    const qrResult = await qrCodeService.generateDailyAttendanceQR();
    
    res.status(200).json({
      message: "Daily attendance QR Code generated successfully",
      qrCode: qrResult.qrCode,
      sessionId: qrResult.sessionId,
      expiresAt: qrResult.expiresAt
    });
  } catch (error) {
    console.error("Error generating daily attendance QR Code:", error);
    res.status(500).json({ 
      message: "Error generating daily attendance QR Code", 
      error: error.message 
    });
  }
};

// Generate Meeting QR Code
const generateMeetingQR = async (req, res) => {
  try {
    const qrResult = await qrCodeService.generateMeetingQR();
    
    res.status(200).json({
      message: "Meeting QR Code generated successfully",
      qrCode: qrResult.qrCode,
      sessionId: qrResult.sessionId,
      expiresAt: qrResult.expiresAt
    });
  } catch (error) {
    console.error("Error generating meeting QR Code:", error);
    res.status(500).json({ 
      message: "Error generating meeting QR Code", 
      error: error.message 
    });
  }
};

// Get current QR code info
const getCurrentQRInfo = async (req, res) => {
  try {
    const qrInfo = qrCodeService.getCurrentQRInfo();
    
    if (!qrInfo) {
      // No active QR code found, auto-generate a new one
      const newQR = await qrCodeService.generateDailyAttendanceQR();
      
      return res.status(200).json({
        success: true,
        sessionId: newQR.sessionId,
        expiresAt: newQR.expiresAt,
        usedCount: 0,
        timeLeft: Math.max(0, newQR.expiresAt - new Date().getTime()),
        qrCode: newQR.qrCode,
        autoGenerated: true
      });
    }
    
    const timeLeft = Math.max(0, qrInfo.expiresAt - new Date().getTime());
    
    // If current QR is expired, generate new one
    if (timeLeft <= 0) {
      const newQR = await qrCodeService.generateDailyAttendanceQR();
      
      return res.status(200).json({
        success: true,
        sessionId: newQR.sessionId,
        expiresAt: newQR.expiresAt,
        usedCount: 0,
        timeLeft: Math.max(0, newQR.expiresAt - new Date().getTime()),
        qrCode: newQR.qrCode,
        autoGenerated: true
      });
    }
    
    res.status(200).json({
      success: true,
      sessionId: qrInfo.sessionId,
      expiresAt: qrInfo.expiresAt,
      usedCount: qrInfo.usedBy.length,
      timeLeft: timeLeft
    });
  } catch (error) {
    console.error("Error getting current QR info:", error);
    res.status(500).json({ 
      success: false,
      message: "Error getting QR info", 
      error: error.message 
    });
  }
};



const markAttendance = async (req, res) => {
  const { internId, status } = req.body; 

  try {
    await qrCodeService.markAttendance(internId, status);
    res.status(200).json({ message: "Attendance marked successfully" });
  } catch (error) {
    res.status(500).json({ message: "Error marking attendance", error: error.message });
  }
};


const scanQRCode = async (req, res) => {
  const { qrCode, internId } = req.body;

  try {
    // This is the legacy meeting QR scan - keeping for backward compatibility
    const isValid = await qrCodeService.verifyQRCode(qrCode);
    if (!isValid) {
      return res.status(400).json({ message: "QR code is expired or invalid." });
    }

    const status = "Present";
    const type = "qr"; // Meeting QR attendance
    const timeMarked = new Date();
    const updatedIntern = await attendanceService.markAttendanceAndNotify(internId, status, null, type, timeMarked);

    res.status(200).json({ message: "Attendance marked successfully and email sent!" });
  } catch (error) {
    res.status(500).json({ message: "Error processing QR code", error: error.message });
  }
};

// Scan Meeting QR Code (New system)
const scanMeetingQR = async (req, res) => {
  const { sessionId, qrContent, internId } = req.body;

  try {
    // Accept either sessionId (old format) or qrContent (new format)
    const qrData = qrContent || sessionId;
    
    if (!qrData || !internId) {
      return res.status(400).json({ 
        message: "QR data and Intern ID are required" 
      });
    }

    const result = await qrCodeService.markMeetingAttendanceQR(qrData, internId);

    res.status(200).json({
      message: "Meeting attendance marked successfully and email sent!",
      intern: {
        traineeId: result.intern.traineeId,
        traineeName: result.intern.traineeName
      },
      timeMarked: result.timeMarked
    });
  } catch (error) {
    console.error("Error scanning meeting QR code:", error);
    res.status(400).json({ 
      message: error.message || "Error scanning meeting QR code",
      error: error.message 
    });
  }
};

// Scan Daily Attendance QR Code
const scanDailyAttendanceQR = async (req, res) => {
  const { sessionId, internId } = req.body;

  try {
    if (!sessionId || !internId) {
      return res.status(400).json({
        success: false,
        message: "Session ID and Intern ID are required"
      });
    }

    const result = await qrCodeService.markDailyAttendanceQR(sessionId, internId);
    
    res.status(200).json({
      success: true,
      message: result.message,
      intern: {
        traineeId: result.intern.traineeId,
        name: result.intern.traineeName,
        timeMarked: result.timeMarked
      },
      timeMarked: result.timeMarked
    });
  } catch (error) {
    console.error("Error scanning daily attendance QR code:", error);
    
    // Handle specific error cases
    let statusCode = 500;
    if (error.message.includes("not found") || error.message.includes("expired")) {
      statusCode = 400;
    } else if (error.message.includes("already marked")) {
      statusCode = 409; // Conflict
    }
    
    res.status(statusCode).json({
      success: false,
      message: error.message,
      error: error.message
    });
  }
};

// External API for TalentHub system to scan QR codes
const scanDailyAttendanceExternal = async (req, res) => {
  const { qrSessionId, traineeId } = req.body;

  try {
    // Validate input
    if (!qrSessionId || !traineeId) {
      return res.status(400).json({
        success: false,
        message: "QR Session ID and Trainee ID are required",
        code: "MISSING_PARAMS"
      });
    }

    // Find intern by traineeId, create if doesn't exist
    let intern = await InternRepository.findByTraineeId(traineeId);
    if (!intern) {
      // Create a basic intern record for external sync
      // In a production system, you'd fetch more details from TalentHub API
      console.log(`Creating new intern record for traineeId: ${traineeId}`);
      const newInternData = {
        traineeId: traineeId,
        traineeName: `External Trainee ${traineeId}`, // Placeholder name
        email: `trainee_${traineeId}@external.com`, // Placeholder email
        attendance: []
      };
      intern = await InternRepository.addIntern(newInternData);
      console.log(`Created intern record: ${intern._id}`);
    }

    // For external calls, mark daily attendance directly without QR validation
    // since TalentHub has its own QR validation system
    const result = await qrCodeService.markExternalDailyAttendance(intern._id.toString(), qrSessionId);
    
    res.status(200).json({
      success: true,
      message: "Attendance marked successfully",
      data: {
        traineeId: result.intern.traineeId,
        traineeName: result.intern.traineeName,
        timeMarked: result.timeMarked,
        date: new Date().toDateString()
      }
    });

  } catch (error) {
    console.error("Error in external QR scan:", error);
    
    let statusCode = 500;
    let errorCode = "INTERNAL_ERROR";
    
    if (error.message.includes("not found") || error.message.includes("expired")) {
      statusCode = 400;
      errorCode = "QR_EXPIRED";
    } else if (error.message.includes("already marked")) {
      statusCode = 409;
      errorCode = "ALREADY_MARKED";
    }
    
    res.status(statusCode).json({
      success: false,
      message: error.message,
      code: errorCode
    });
  }
};

// Get current active meeting QR code info
const getCurrentMeetingQRInfo = async (req, res) => {
  try {
    const qrInfo = qrCodeService.getCurrentMeetingQRInfo();
    
    if (!qrInfo) {
      // No active meeting QR code found, generate a new one
      const newQR = await qrCodeService.generateMeetingQR();
      
      return res.status(200).json({
        success: true,
        sessionId: newQR.sessionId,
        expiresAt: newQR.expiresAt,
        usedCount: 0,
        timeLeft: Math.max(0, newQR.expiresAt - new Date().getTime()),
        qrCode: newQR.qrCode,
        autoGenerated: true
      });
    }
    
    const timeLeft = Math.max(0, qrInfo.expiresAt - new Date().getTime());
    
    // If current QR is expired, generate new one
    if (timeLeft <= 0) {
      const newQR = await qrCodeService.generateMeetingQR();
      
      return res.status(200).json({
        success: true,
        sessionId: newQR.sessionId,
        expiresAt: newQR.expiresAt,
        usedCount: 0,
        timeLeft: Math.max(0, newQR.expiresAt - new Date().getTime()),
        qrCode: newQR.qrCode,
        autoGenerated: true
      });
    }
    
    res.status(200).json({
      success: true,
      sessionId: qrInfo.sessionId,
      expiresAt: qrInfo.expiresAt,
      usedCount: qrInfo.usedBy.length,
      timeLeft: timeLeft
    });
  } catch (error) {
    console.error("Error getting current meeting QR info:", error);
    res.status(500).json({ 
      success: false,
      message: "Error getting meeting QR code information",
      error: error.message 
    });
  }
};

// Verify QR status for external applications
const verifyQRStatus = async (req, res) => {
  const { sessionId } = req.params;

  try {
    const qrInfo = qrCodeService.getCurrentQRInfo();
    const currentTime = new Date().getTime();
    
    if (!qrInfo || qrInfo.sessionId !== sessionId) {
      return res.status(404).json({
        success: false,
        message: "QR code not found or no longer active",
        code: "QR_NOT_FOUND"
      });
    }
    
    if (currentTime > qrInfo.expiresAt) {
      return res.status(400).json({
        success: false,
        message: "QR code has expired",
        code: "QR_EXPIRED"
      });
    }
    
    res.status(200).json({
      success: true,
      sessionId: qrInfo.sessionId,
      expiresAt: qrInfo.expiresAt,
      timeLeft: Math.max(0, qrInfo.expiresAt - currentTime),
      isValid: true
    });
  } catch (error) {
    console.error("Error verifying QR status:", error);
    res.status(500).json({
      success: false,
      message: "Error verifying QR code status",
      error: error.message
    });
  }
};

// External API for TalentHub system - Meeting attendance
const scanMeetingExternal = async (req, res) => {
  const { qrSessionId, traineeId } = req.body;

  try {
    // Validate input
    if (!qrSessionId || !traineeId) {
      return res.status(400).json({
        success: false,
        message: "QR Session ID and Trainee ID are required",
        code: "MISSING_PARAMS"
      });
    }

    // Find intern by traineeId, create if doesn't exist
    let intern = await InternRepository.findByTraineeId(traineeId);
    if (!intern) {
      // Create a basic intern record for external sync
      // In a production system, you'd fetch more details from TalentHub API
      console.log(`Creating new intern record for traineeId: ${traineeId}`);
      const newInternData = {
        traineeId: traineeId,
        traineeName: `External Trainee ${traineeId}`, // Placeholder name
        email: `trainee_${traineeId}@external.com`, // Placeholder email
        attendance: []
      };
      intern = await InternRepository.addIntern(newInternData);
      console.log(`Created intern record: ${intern._id}`);
    }

    // For external calls, mark meeting attendance directly without QR validation
    // since TalentHub has its own QR validation system
    const result = await qrCodeService.markExternalMeetingAttendance(intern._id.toString(), qrSessionId);
    
    res.status(200).json({
      success: true,
      message: "Meeting attendance marked successfully",
      data: {
        traineeId: result.intern.traineeId,
        traineeName: result.intern.traineeName,
        timeMarked: result.timeMarked,
        date: new Date().toDateString()
      }
    });

  } catch (error) {
    console.error("Error in external meeting QR scan:", error);
    
    let statusCode = 500;
    let errorCode = "INTERNAL_ERROR";
    
    if (error.message.includes("not found") || error.message.includes("expired")) {
      statusCode = 400;
      errorCode = "QR_EXPIRED";
    } else if (error.message.includes("already marked")) {
      statusCode = 409;
      errorCode = "ALREADY_MARKED";
    }
    
    res.status(statusCode).json({
      success: false,
      message: error.message,
      code: errorCode
    });
  }
};

module.exports = { 
  generateQRCode, 
  markAttendance, 
  scanQRCode, 
  generateDailyAttendanceQR,
  generateMeetingQR,
  scanDailyAttendanceQR,
  scanMeetingQR,
  getCurrentQRInfo,
  getCurrentMeetingQRInfo,
  scanDailyAttendanceExternal,
  scanMeetingExternal,
  verifyQRStatus
};
